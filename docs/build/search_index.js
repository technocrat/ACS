var documenterSearchIndex = {"docs":
[{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"We welcome contributions to ACS.jl! Here's how you can help:","category":"page"},{"location":"contributing/#Types-of-Contributions","page":"Contributing","title":"Types of Contributions","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Bug reports\nFeature requests\nDocumentation improvements\nCode contributions\nExamples and tutorials","category":"page"},{"location":"contributing/#Development-Setup","page":"Contributing","title":"Development Setup","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Fork the repository\nClone your fork:\ngit clone https://github.com/yourusername/ACS.jl.git\nAdd the original repository as upstream:\ngit remote add upstream https://github.com/originalowner/ACS.jl.git\nCreate a new branch for your changes:\ngit checkout -b feature-name","category":"page"},{"location":"contributing/#Running-Tests","page":"Contributing","title":"Running Tests","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"using Pkg\nPkg.test(\"ACS\")","category":"page"},{"location":"contributing/#Documentation","page":"Contributing","title":"Documentation","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Documentation is built using Documenter.jl\nBuild the documentation locally:\ninclude(\"docs/make.jl\")\nPreview the documentation in your browser at docs/build/index.html","category":"page"},{"location":"contributing/#Code-Style-Guidelines","page":"Contributing","title":"Code Style Guidelines","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Follow Julia's style guide\nUse meaningful variable names\nAdd docstrings for all public functions\nInclude examples in docstrings\nWrite tests for new functionality","category":"page"},{"location":"contributing/#Submitting-Changes","page":"Contributing","title":"Submitting Changes","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Commit your changes:\ngit add .\ngit commit -m \"Description of changes\"\nPush to your fork:\ngit push origin feature-name\nCreate a Pull Request from your fork to the main repository","category":"page"},{"location":"contributing/#Code-Review-Process","page":"Contributing","title":"Code Review Process","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"All contributions require review\nAddress any feedback from maintainers\nKeep pull requests focused on a single change\nMaintain a clean commit history","category":"page"},{"location":"contributing/#Getting-Help","page":"Contributing","title":"Getting Help","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Open an issue for questions\nJoin our community discussions\nRead the existing documentation ","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Basic-Usage","page":"Examples","title":"Basic Usage","text":"","category":"section"},{"location":"examples/#Getting-Population-Estimates","page":"Examples","title":"Getting Population Estimates","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ACS\n\n# Get total population for all states using 5-year estimates\ndf = get_acs(\n    variables = [\"B01003_001E\"],\n    geography = \"state\"\n)\n\n# Get population and median household income\ndf = get_acs(\n    variables = [\"B01003_001E\", \"B19013_001E\"],\n    geography = \"state\"\n)","category":"page"},{"location":"examples/#Working-with-Margins-of-Error","page":"Examples","title":"Working with Margins of Error","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Get MOE for total population\ndf_moe = get_acs_moe(\n    variables = [\"B01003_001M\"],\n    geography = \"state\"\n)","category":"page"},{"location":"examples/#Geographic-Levels","page":"Examples","title":"Geographic Levels","text":"","category":"section"},{"location":"examples/#State-Level","page":"Examples","title":"State Level","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Get state-level data\ndf = get_acs(\n    variables = [\"B01003_001E\"],\n    geography = \"state\"\n)","category":"page"},{"location":"examples/#County-Level","page":"Examples","title":"County Level","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Get all counties in California\ndf = get_acs(\n    variables = [\"B01003_001E\"],\n    geography = \"county\",\n    state = \"CA\"\n)","category":"page"},{"location":"examples/#Census-Tract-Level","page":"Examples","title":"Census Tract Level","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Get all tracts in a specific county\ndf = get_acs(\n    variables = [\"B01003_001E\"],\n    geography = \"tract\",\n    state = \"CA\",\n    county = \"001\"  # Alameda County\n)","category":"page"},{"location":"examples/#Survey-Types","page":"Examples","title":"Survey Types","text":"","category":"section"},{"location":"examples/#1-Year-Estimates","page":"Examples","title":"1-Year Estimates","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Get 1-year estimates (65,000+ population areas only)\ndf = get_acs(\n    variables = [\"B01003_001E\"],\n    geography = \"state\",\n    survey = \"acs1\"\n)","category":"page"},{"location":"examples/#3-Year-Estimates","page":"Examples","title":"3-Year Estimates","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Get 3-year estimates from 2013 (20,000+ population areas)\ndf = get_acs(\n    variables = [\"B01003_001E\"],\n    geography = \"state\",\n    year = 2013,\n    survey = \"acs3\"\n)","category":"page"},{"location":"examples/#5-Year-Estimates","page":"Examples","title":"5-Year Estimates","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Get 5-year estimates (all areas)\ndf = get_acs(\n    variables = [\"B01003_001E\"],\n    geography = \"state\",\n    survey = \"acs5\"\n)","category":"page"},{"location":"examples/#Error-Handling","page":"Examples","title":"Error Handling","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The package includes robust error handling for common scenarios:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Invalid year for 3-year estimates\ntry\n    df = get_acs(\n        variables = [\"B01003_001E\"],\n        geography = \"state\",\n        year = 2020,\n        survey = \"acs3\"\n    )\ncatch e\n    println(\"Error: \", e)\nend\n\n# Invalid geography level\ntry\n    df = get_acs(\n        variables = [\"B01003_001E\"],\n        geography = \"invalid\"\n    )\ncatch e\n    println(\"Error: \", e)\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"#ACS.jl-Documentation","page":"Home","title":"ACS.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for ACS.jl, a Julia package for retrieving data from the U.S. Census Bureau's American Community Survey (ACS) API.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ACS.jl provides a simple and robust interface to access American Community Survey data through the Census Bureau's API. The package supports:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Data retrieval from 1-year, 3-year, and 5-year ACS estimates\nVarious geographic levels (state, county, tract, block group)\nAutomatic handling of state FIPS codes\nRobust error handling and retries\nDataFrame output format\nSeparate functions for estimates and margin of error values","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using ACS\n\n# Set your Census API key\nENV[\"CENSUS_API_KEY\"] = \"your-api-key-here\"\n\n# Get total population estimates for all states (5-year ACS)\ndf = get_acs(\n    variables = [\"B01003_001E\"],\n    geography = \"state\"\n)\n\n# Get margin of error for total population\ndf_moe = get_acs_moe(\n    variables = [\"B01003_001M\"],\n    geography = \"state\"\n)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/yourusername/ACS.jl\")","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"#Survey-Types","page":"Home","title":"Survey Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"5-year estimates (2009-present)\n3-year estimates (2007-2013)\n1-year estimates (2005-present, except 2020)","category":"page"},{"location":"#Geographic-Levels","page":"Home","title":"Geographic Levels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"State\nCounty\nCensus tract\nBlock group","category":"page"},{"location":"#Data-Types","page":"Home","title":"Data Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Estimates (variables ending in 'E')\nMargins of error (variables ending in 'M')","category":"page"},{"location":"#Census-API-Key","page":"Home","title":"Census API Key","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To use this package, you need a Census API key. You can obtain one at: https://api.census.gov/data/key_signup.html","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions are welcome! Please feel free to submit issues or pull requests on our GitHub repository. ","category":"page"},{"location":"api/functions/#API-Functions","page":"API Functions","title":"API Functions","text":"","category":"section"},{"location":"api/functions/#Main-Interface","page":"API Functions","title":"Main Interface","text":"","category":"section"},{"location":"api/functions/","page":"API Functions","title":"API Functions","text":"get_acs\nget_acs1\nget_acs3\nget_acs5\nget_acs_moe\nget_acs_moe1\nget_acs_moe3\nget_acs_moe5","category":"page"},{"location":"api/functions/#ACS.get_acs","page":"API Functions","title":"ACS.get_acs","text":"get_acs(;\n    variables::Vector{String},\n    geography::String,\n    year::Int = 2022,\n    survey::String = \"acs5\",\n    state::Union{String,Nothing} = nothing,\n    county::Union{String,Nothing} = nothing\n) -> DataFrame\n\nMain interface to fetch data from the American Community Survey.\n\nArguments\n\nvariables: Vector of Census variable codes (must end with 'E' for estimates)\ngeography: Geographic level (\"state\", \"county\", \"tract\", \"block group\")\nyear: Survey year (default: 2022)\nsurvey: Survey type (\"acs1\", \"acs3\", or \"acs5\", default: \"acs5\")\nstate: Optional state postal code or FIPS code\ncounty: Optional county FIPS code (requires state)\n\nReturns\n\nDataFrame with requested Census data\n\nExample\n\n# Get total population for all states using 5-year estimates\ndf = get_acs(\n    variables = [\"B01003_001E\"],\n    geography = \"state\",\n    survey = \"acs5\"\n)\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#ACS.get_acs1","page":"API Functions","title":"ACS.get_acs1","text":"get_acs1(;\n    variables::Vector{String},\n    geography::String,\n    year::Int = 2022,\n    state::Union{String,Nothing} = nothing,\n    county::Union{String,Nothing} = nothing\n) -> DataFrame\n\nFetch estimates from American Community Survey 1-year estimates. Only available for geographies with populations of 65,000 and greater.\n\nArguments\n\nvariables: Vector of Census variable codes (must end with 'E' for estimates)\ngeography: Geographic level (\"state\", \"county\", \"tract\", \"block group\")\nyear: Survey year (default: 2022)\nstate: Optional state postal code or FIPS code\ncounty: Optional county FIPS code (requires state)\n\nReturns\n\nDataFrame with requested Census data\n\nExample\n\n# Get total population for all states\ndf = get_acs1(\n    variables = [\"B01003_001E\"],\n    geography = \"state\"\n)\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#ACS.get_acs3","page":"API Functions","title":"ACS.get_acs3","text":"get_acs3(;\n    variables::Vector{String},\n    geography::String,\n    year::Int = 2013,\n    state::Union{String,Nothing} = nothing,\n    county::Union{String,Nothing} = nothing\n) -> DataFrame\n\nFetch estimates from American Community Survey 3-year estimates. Only available from 2007-2013 for geographies with populations of 20,000 and greater.\n\nArguments\n\nvariables: Vector of Census variable codes (must end with 'E' for estimates)\ngeography: Geographic level (\"state\", \"county\", \"tract\", \"block group\")\nyear: Survey year (2007-2013)\nstate: Optional state postal code or FIPS code\ncounty: Optional county FIPS code (requires state)\n\nReturns\n\nDataFrame with requested Census data\n\nExample\n\n# Get total population for all states in 2013\ndf = get_acs3(\n    variables = [\"B01003_001E\"],\n    geography = \"state\",\n    year = 2013\n)\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#ACS.get_acs5","page":"API Functions","title":"ACS.get_acs5","text":"get_acs5(;\n    variables::Vector{String},\n    geography::String,\n    year::Int = 2022,\n    state::Union{String,Nothing} = nothing,\n    county::Union{String,Nothing} = nothing\n) -> DataFrame\n\nFetch estimates from American Community Survey 5-year estimates.\n\nArguments\n\nvariables: Vector of Census variable codes (must end with 'E' for estimates)\ngeography: Geographic level (\"state\", \"county\", \"tract\", \"block group\")\nyear: Survey year (default: 2022)\nstate: Optional state postal code or FIPS code\ncounty: Optional county FIPS code (requires state)\n\nReturns\n\nDataFrame with requested Census data\n\nExample\n\n# Get total population for all states\ndf = get_acs5(\n    variables = [\"B01003_001E\"],\n    geography = \"state\"\n)\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#ACS.get_acs_moe","page":"API Functions","title":"ACS.get_acs_moe","text":"get_acs_moe(;\n    variables::Vector{String},\n    geography::String,\n    year::Int = 2022,\n    survey::String = \"acs5\",\n    state::Union{String,Nothing} = nothing,\n    county::Union{String,Nothing} = nothing\n) -> DataFrame\n\nMain interface to fetch margin of error data from the American Community Survey.\n\nArguments\n\nvariables: Vector of Census variable codes (must end with 'M' for MOE)\ngeography: Geographic level (\"state\", \"county\", \"tract\", \"block group\")\nyear: Survey year (default: 2022)\nsurvey: Survey type (\"acs1\", \"acs3\", or \"acs5\", default: \"acs5\")\nstate: Optional state postal code or FIPS code\ncounty: Optional county FIPS code (requires state)\n\nReturns\n\nDataFrame with requested Census MOE data\n\nExample\n\n# Get MOE for total population for all states using 5-year estimates\ndf = get_acs_moe(\n    variables = [\"B01003_001M\"],\n    geography = \"state\",\n    survey = \"acs5\"\n)\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#ACS.get_acs_moe1","page":"API Functions","title":"ACS.get_acs_moe1","text":"get_acs_moe1(;\n    variables::Vector{String},\n    geography::String,\n    year::Int = 2022,\n    state::Union{String,Nothing} = nothing,\n    county::Union{String,Nothing} = nothing\n) -> DataFrame\n\nFetch margin of error values from American Community Survey 1-year estimates. Only available for geographies with populations of 65,000 and greater.\n\nArguments\n\nvariables: Vector of Census variable codes (must end with 'M' for MOE)\ngeography: Geographic level (\"state\", \"county\", \"tract\", \"block group\")\nyear: Survey year (default: 2022)\nstate: Optional state postal code or FIPS code\ncounty: Optional county FIPS code (requires state)\n\nReturns\n\nDataFrame with requested Census MOE data\n\nExample\n\n# Get MOE for total population for all states\ndf = get_acs_moe1(\n    variables = [\"B01003_001M\"],\n    geography = \"state\"\n)\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#ACS.get_acs_moe3","page":"API Functions","title":"ACS.get_acs_moe3","text":"get_acs_moe3(;\n    variables::Vector{String},\n    geography::String,\n    year::Int = 2013,\n    state::Union{String,Nothing} = nothing,\n    county::Union{String,Nothing} = nothing\n) -> DataFrame\n\nFetch margin of error values from American Community Survey 3-year estimates. Only available from 2007-2013 for geographies with populations of 20,000 and greater.\n\nArguments\n\nvariables: Vector of Census variable codes (must end with 'M' for MOE)\ngeography: Geographic level (\"state\", \"county\", \"tract\", \"block group\")\nyear: Survey year (2007-2013)\nstate: Optional state postal code or FIPS code\ncounty: Optional county FIPS code (requires state)\n\nReturns\n\nDataFrame with requested Census MOE data\n\nExample\n\n# Get MOE for total population for all states in 2013\ndf = get_acs_moe3(\n    variables = [\"B01003_001M\"],\n    geography = \"state\",\n    year = 2013\n)\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#ACS.get_acs_moe5","page":"API Functions","title":"ACS.get_acs_moe5","text":"get_acs_moe5(;\n    variables::Vector{String},\n    geography::String,\n    year::Int = 2022,\n    state::Union{String,Nothing} = nothing,\n    county::Union{String,Nothing} = nothing\n) -> DataFrame\n\nFetch margin of error values from American Community Survey 5-year estimates.\n\nArguments\n\nvariables: Vector of Census variable codes (must end with 'M' for MOE)\ngeography: Geographic level (\"state\", \"county\", \"tract\", \"block group\")\nyear: Survey year (default: 2022)\nstate: Optional state postal code or FIPS code\ncounty: Optional county FIPS code (requires state)\n\nReturns\n\nDataFrame with requested Census MOE data\n\nExample\n\n# Get MOE for total population for all states\ndf = get_acs_moe5(\n    variables = [\"B01003_001M\"],\n    geography = \"state\"\n)\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#Helper-Functions","page":"API Functions","title":"Helper Functions","text":"","category":"section"},{"location":"api/functions/","page":"API Functions","title":"API Functions","text":"state_postal_to_fips\ncreate_geoid","category":"page"},{"location":"api/functions/#ACS.state_postal_to_fips","page":"API Functions","title":"ACS.state_postal_to_fips","text":"state_postal_to_fips(postal_code::String) -> String\n\nConvert a state postal code to its FIPS code.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#ACS.create_geoid","page":"API Functions","title":"ACS.create_geoid","text":"create_geoid(df::DataFrame, geography::String) -> Vector{String}\n\nCreate GEOID values for a DataFrame based on geography type.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#Internal-Functions","page":"API Functions","title":"Internal Functions","text":"","category":"section"},{"location":"api/functions/","page":"API Functions","title":"API Functions","text":"These functions are used internally but may be useful for advanced users:","category":"page"},{"location":"api/functions/","page":"API Functions","title":"API Functions","text":"make_census_request\nbuild_census_url\nprocess_census_response","category":"page"},{"location":"api/functions/#ACS.make_census_request","page":"API Functions","title":"ACS.make_census_request","text":"make_census_request(url::String, headers::Vector{Pair{String,String}}) -> HTTP.Response\n\nMake a request to the Census API with robust error handling and retries.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#ACS.build_census_url","page":"API Functions","title":"ACS.build_census_url","text":"build_census_url(;\n    variables::Vector{String},\n    geography::String,\n    year::Int,\n    survey::String,\n    state::Union{String,Nothing} = nothing,\n    county::Union{String,Nothing} = nothing\n) -> String\n\nBuild a Census API URL for the given parameters.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/#ACS.process_census_response","page":"API Functions","title":"ACS.process_census_response","text":"process_census_response(r::HTTP.Response, geography::String) -> DataFrame\n\nProcess a Census API response into a DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"api/functions/","page":"API Functions","title":"API Functions","text":"","category":"page"}]
}
